.InputField {
	gap: calc(var(--grid-gutter) / 2);
}
.InputField[arrangement="inline"] {
	align-items: baseline;
	grid-template-columns: max-content 1fr;
}
.InputField[arrangement="inline"],
.InputField[arrangement="stacked"] {
	display: grid;
}
.InputField[arrangement="stacked"] {
	justify-content: space-between;
}
.InputField[arrangement="stacked"],
.InputField[arrangement="stand-alone"] {
	align-items: baseline;
}
.InputField[arrangement="stand-alone"] {
	display: inline-flex;
}

.Fluid {
	flex: 1;
	grid-template-columns: 100%;
}

.InnerWrapper {
	display: flex;
	flex: 1;
	position: relative;
}

.Input {
	background-color: var(--colour-background);
	border: 1px solid var(--colour-medium);
	border-radius: var(--default-border-radius);
	padding: var(--default-padding);
}
.Input:focus {
	outline-color: var(--colour-primary);
}
.Input:disabled {
	cursor: default;
}
.Input:disabled,
.Input[readonly] {
	background-color: var(--colour-medium);
	color: var(--colour-muted);
}
.InputField[readonly] .Input,
.InputField[readonly] .Label {
	cursor: not-allowed;
}

.Input:not([type="checkbox"]):not([type="radio"]) {
	width: 100%;
}

.Input[type="checkbox"],
.Input[type="radio"] {
	margin: unset;
}

.Input[type="date"],
.Input[type="datetime"],
.Input[type="datetime-local"],
.Input[type="time"] {
	font: inherit;
}

.Input[type="number"] {
	text-align: right;
}

textarea.Input {
	line-height: inherit;
}

.InputField:not([switch]) .Label {
	order: -1;
}

.InputField[required] .Label::after {
	content: '*';
	margin-left: 0.1em;
}
.InputField[touched][invalid] .Input:focus {
	outline-color: var(--colour-danger);
}
.InputField[touched][invalid] .Input,
.Error {
	border-color: var(--colour-danger);
}
.InputField[touched][invalid],
.InputField[touched][invalid],
.Error {
	color: var(--colour-danger);
}

.Input:focus + .Error,
.Input:hover + .Error {
	opacity: 1;
	pointer-events: all;
}

select.Input {
	appearance: none;
	background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22currentColor%22%20viewBox%3D%220%200%2016%2016%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20d%3D%22M1.646%204.646a.5.5%200%200%201%20.708%200L8%2010.293l5.646-5.647a.5.5%200%200%201%20.708.708l-6%206a.5.5%200%200%201-.708%200l-6-6a.5.5%200%200%201%200-.708z%22%2F%3E%3C%2Fsvg%3E');
	background-position: right 0.5em center;
	background-repeat: no-repeat;
	background-size: 0.65em auto;
}

.Error {
	background-color: var(--colour-background);
	border: 1px solid;
	border-radius: var(--default-border-radius);
	display: inline-block;
	opacity: 0;
	padding: 0.5em;
	pointer-events: none;
	position: absolute;
	transition: opacity var(--default-transition);;
	z-index: 1;
}
.Error::after {
	background-color: inherit;
	border: inherit;
	clip-path: polygon(0 0, 45% 55%, 100% 100%, 100% 0%);
	content: '';
	display: block;
	height: 0.5em;
	position: absolute;
	translate: -50% -50%;
	width: 0.5em;
}

@media only screen and (max-width: 736px) {
	/* On mobile, position errors below field */
	.Error {
		bottom: 0;
		left: 0;
		margin: 0 auto;
		translate: 0 calc(100% + 1em);
	}
	.Error::after {
		left: 50%;
		rotate: -45deg;
		top: 0;
	}
}

@media only screen and (min-width: 737px) {
	/* Above mobile, position errors right of field */
	.InputField[arrangement="inline"] .Error,
	.InputField[arrangement="stand-alone"] .Error {
		margin-left: auto;
		margin-right: 0;
		top: 50%;
		translate: calc(100% + 1em) -50%;
	}
	.InputField[arrangement="inline"] .Error::after,
	.InputField[arrangement="stand-alone"] .Error::after {
		left: 0;
		rotate: 225deg;
		top: 50%;
	}

	.InputField[arrangement="stacked"] .Error {
		margin: auto;
		top: 100%;
		translate: 0 1em;
	}
	.InputField[arrangement="stacked"] .Error::after {
		left: 50%;
		rotate: 315deg;
		top: 0;
		translate: -50% -50%;
	}
}

input[variant="toggle"] {
	align-items: center;
	appearance: none;
	-webkit-appearance: none;
	background-color: #eee;
	border-radius: 1rem;
	display: inline-flex;
	flex-direction: row;
	height: 1em;
	justify-content: center;
	padding: unset;
	width: 2em;
}

input[variant="toggle"]::after {
	align-self: flex-end;
	background-color: #aaa;
	border-radius: 100%;
	content: '';
	display: inline-block;
	height: 100%;
	scale: 1.3;
	transition-property:
		background-color,
		translate;
	transition-duration: var(--default-transition);
	translate: calc(-50% + 1px);
	width: 50%;
}
input[variant="toggle"]:checked::after {
	background-color: var(--colour-primary);
	translate: 50%;
}
input[variant="toggle"][appearane="danger"]:checked::after {
	background-color: var(--colour-danger);
}
input[variant="toggle"][appearane="success"]:checked::after {
	background-color: var(--colour-success);
}
