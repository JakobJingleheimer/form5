.InputField {
	gap: calc(var(--grid-gutter) / 2);
}
.InputField[arrangement="inline"] {
	align-items: baseline;
	grid-template-columns: max-content 1fr;
}
.InputField[arrangement="inline"],
.InputField[arrangement="stacked"] {
	display: grid;
}
.InputField[arrangement="stacked"] {
	justify-content: space-between;
}
.InputField[arrangement="compact"],
.InputField[arrangement="stacked"],
.InputField[arrangement="stand-alone"] {
	align-items: baseline;
}

.InputField[arrangement="compact"] {
	gap: unset;
	position: relative;
}

.InputField[variant="cta"],
.InputField[variant="glyph"] {
	align-items: stretch;
	box-shadow: unset;
	display: flex;
	padding: unset;
}

/* After InputField[variant] to override display:flex */
.InputField[arrangement="compact"],
.InputField[arrangement="stand-alone"] {
	display: inline-flex;
}

.Fluid {
	grid-template-columns: 100%;
}

.Fluid,
.Fluid .Input {
	flex: 1;
}


.Fluid .InnerWrapper {
	flex: none;
}

.Input {
	background-color: var(--colour-background);
	border: 1px solid var(--colour-medium);
	border-radius: var(--default-border-radius);
	padding: var(--default-padding);
}
.Input[variant="cta"]:focus + .InnerWrapper > .Label,
.Input:focus {
	outline-color: var(--colour-primary);
}
.Input:disabled {
	cursor: default;
}
.Input:disabled,
.Input[readonly] {
	background-color: var(--colour-medium);
	color: var(--colour-muted);
}
.Input[readonly],
.Input[readonly] + .InnerWrapper > .Label {
	cursor: not-allowed;
}
.Input:not([variant="cta"]):required + .InnerWrapper > .Label::after {
	content: '*';
	margin-left: 0.1em;
}

.Input[type="checkbox"],
.Input[type="radio"] {
	margin: unset;
}

.Input[type="color"] {
	box-sizing: content-box;
}

.Input[type="date"],
.Input[type="datetime"],
.Input[type="datetime-local"],
.Input[type="time"] {
	font: inherit;
}

.Input[type="number"] {
	text-align: right;
}

.Input[type="search"] {
	padding:
		var(--default-padding)
		calc(var(--default-padding) + 1.5em);
}

.Input[type="search"]::-webkit-search-cancel-button,
.Input[type="search"]::-webkit-search-decoration {
  appearance: none;
}

.SearchSubmit {
	left: 0;
	order: -1;
	position: absolute;
}

.SearchReset {
	position: absolute;
	right: 0;
}

select.Input {
	appearance: none;
	background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22currentColor%22%20viewBox%3D%220%200%2016%2016%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20d%3D%22M1.646%204.646a.5.5%200%200%201%20.708%200L8%2010.293l5.646-5.647a.5.5%200%200%201%20.708.708l-6%206a.5.5%200%200%201-.708%200l-6-6a.5.5%200%200%201%200-.708z%22%2F%3E%3C%2Fsvg%3E');
	background-position: right 0.5em center;
	background-repeat: no-repeat;
	background-size: 0.65em auto;
	padding-right: calc(1em + var(--default-padding)); /* 1em for the icon */
}

textarea.Input {
	line-height: inherit;
}

.InputField:not([switch]) .InnerWrapper {
	order: -1;
}

.InputField[touched] .Input[variant="cta"]:invalid:focus + .InnerWrapper > .Label,
.InputField[touched] .Input[variant="glyph"]:invalid:focus + .InnerWrapper > .Label {
	outline: 2px solid;
}

.InputField[touched] .Input[variant="cta"]:invalid:focus + .InnerWrapper > .Label,
.InputField[touched] .Input[variant="glyph"]:invalid:focus + .InnerWrapper > .Label,
.InputField[touched] .Input:invalid:focus {
	outline-color: var(--colour-danger);
}

.InputField[touched] .Input:invalid,
.InputField[touched] .Input[variant="cta"]:invalid + .InnerWrapper > .Label,
.InputField[touched] .Input[variant="glyph"]:invalid + .InnerWrapper > .Label,
.Error {
	border-color: var(--colour-danger);
}
.InputField[touched] .Input:invalid + .InnerWrapper {
	color: var(--colour-danger);
}

/*
 * The Element exist in the doc flow in order to get focused by checkValidity, so 'display: none'
 * and the like are not an option.
 */
.Input[variant="cta"],
.Input[variant="glyph"] {
	height: 0;
	position: absolute;
	width: 0;
	z-index: -1;
}

.Input[variant="cta"] + .InnerWrapper > .Label {
	background-color: var(--colour-light);
	border: 1px solid var(--colour-medium);
	border-radius: inherit;
	color: var(--colour-text-deemphasised);
	fill: var(--colour-text-deemphasised);
}

.Input[variant="cta"]:checked + .InnerWrapper > .Label {
	background-color: var(--colour-primary);
	color: var(--colour-background);
	fill: var(--colour-background);
}

.Input[variant="cta"] + .InnerWrapper > .Label,
.Input[variant="glyph"] + .InnerWrapper > .Label {
	display: flex;
	flex-direction: column;
	flex: 1;
	justify-content: center;
	padding: var(--default-padding);
}

.Input:not(:checked) + .InnerWrapper > .Label[variant="glyph"][appearance] {
	color: unset;
	fill: unset;
}
.Input:checked + .InnerWrapper > .Label[variant="glyph"][appearance="danger"] {
	color: var(--colour-danger);
	fill: var(--colour-danger);
}
.Input:checked + .InnerWrapper > .Label[variant="glyph"][appearance="primary"] {
	color: var(--colour-primary);
	fill: var(--colour-primary);
}
.Input:checked + .InnerWrapper > .Label[variant="glyph"][appearance="affirming"] {
	color: var(--colour-success);
	fill: var(--colour-success);
}
.Input:checked + .InnerWrapper > .Label[variant="glyph"][appearance="warning"] {
	color: var(--colour-warning);
	fill: var(--colour-warning);
}

.Input[variant="toggle"] {
	align-items: center;
	appearance: none;
	-webkit-appearance: none;
	background-color: #eee;
	border-radius: 1rem;
	display: inline-flex;
	flex-direction: row;
	height: 1em;
	justify-content: center;
	padding: unset;
	width: 2em;
}

.Input[variant="toggle"]::after {
	align-self: flex-end;
	background-color: #aaa;
	border-radius: 100%;
	content: '';
	display: inline-block;
	height: 100%;
	scale: 1.3;
	transition-property:
		background-color,
		translate;
	transition-duration: var(--default-transition);
	translate: calc(-50% + 1px);
	width: 50%;
}

.Input[variant="toggle"]:checked::after {
	background-color: var(--colour-primary);
	translate: 50%;
}

.Input[variant="toggle"]:disabled::after {
	filter: saturate(0.4);
}

.Input[variant="toggle"][appearance="danger"]:checked::after {
	background-color: var(--colour-danger);
}

.Input[variant="toggle"][appearance="success"]:checked::after {
	background-color: var(--colour-success);
}

.InnerWrapper {
	border-radius: inherit;
	display: flex;
	flex: 1;
	position: relative;
}

.Input:focus + .InnerWrapper > .Error,
.InputField:hover .Error {
	opacity: 1;
	pointer-events: all;
}

.Error {
	background-color: var(--colour-background);
	border-radius: var(--default-border-radius);
	border: 1px solid;
	box-shadow: var(--default-boxshadow);
	color: inherit;
	display: inline-block;
	left: calc(-0.5em - 1px);
	margin-left: 0;
	margin-right: 0;
	opacity: 0;
	padding: 0.5em;
	pointer-events: none;
	position: absolute;
	top: 0;
	transition: opacity var(--default-transition);
	translate: 0 calc(-100% - 1em);
	width: max-content;
	z-index: 1;
}
.Error::after {
	background-color: inherit;
	border: inherit;
	bottom: calc(-0.5em - 2px);
	clip-path: polygon(0 0, 45% 55%, 100% 100%, 100% 0%);
	content: '';
	display: block;
	height: 0.5em;
	left: calc(0.8em + 1px);
	position: absolute;
	rotate: 135deg;
	translate: -50% -50%;
	width: 0.5em;
}
